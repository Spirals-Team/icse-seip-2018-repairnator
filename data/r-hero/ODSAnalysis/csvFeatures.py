#!/usr/bin/python
import sys, os, subprocess,fnmatch, shutil, csv,re, datetime
import time
import json


features = ["P4J_SRC_ABST_V_AF", "P4J_SRC_ASSIGN_CONST_AF", "P4J_SRC_ASSIGN_LHS_AF", "P4J_SRC_ASSIGN_ZERO_AF", "P4J_SRC_CALLEE_AF", "P4J_SRC_CALL_ARGUMENT_AF", "P4J_SRC_CHANGED_AF", "P4J_SRC_DEREF_AF", "P4J_SRC_FUNC_ARGUMENT_VF", "P4J_SRC_GLOBAL_VARIABLE_VF", "P4J_SRC_INDEX_AF", "P4J_SRC_INSERT_CONTROL_RF", "P4J_SRC_INSERT_GUARD_RF", "P4J_SRC_INSERT_STMT_RF", "P4J_SRC_LOCAL_VARIABLE_VF", "P4J_SRC_MEMBER_ACCESS_AF", "P4J_SRC_MEMBER_VF", "P4J_SRC_MODIFIED_SIMILAR_VF", "P4J_SRC_MODIFIED_VF", "P4J_SRC_NONZERO_CONST_VF", "P4J_SRC_OP_ADD_AF", "P4J_SRC_OP_DIV_AF", "P4J_SRC_OP_EQ_AF", "P4J_SRC_OP_GE_AF", "P4J_SRC_OP_GT_AF", "P4J_SRC_OP_LE_AF", "P4J_SRC_OP_LT_AF", "P4J_SRC_OP_MOD_AF", "P4J_SRC_OP_MUL_AF", "P4J_SRC_OP_NE_AF", "P4J_SRC_OP_SUB_AF", "P4J_SRC_REMOVE_PARTIAL_IF", "P4J_SRC_REMOVE_STMT", "P4J_SRC_REMOVE_WHOLE_BLOCK", "P4J_SRC_REMOVE_WHOLE_IF", "P4J_SRC_REPLACE_COND_RF", "P4J_SRC_REPLACE_STMT_RF", "P4J_SRC_R_STMT_ASSIGN_AF", "P4J_SRC_R_STMT_CALL_AF", "P4J_SRC_R_STMT_COND_AF", "P4J_SRC_R_STMT_CONTROL_AF", "P4J_SRC_SIZE_LITERAL_VF", "P4J_SRC_STMT_ASSIGN_AF", "P4J_SRC_STMT_CALL_AF", "P4J_SRC_STMT_COND_AF", "P4J_SRC_STMT_CONTROL_AF", "P4J_SRC_STMT_LABEL_AF", "P4J_SRC_STMT_LOOP_AF", "P4J_SRC_STRING_LITERAL_VF", "P4J_SRC_UOP_DEC_AF", "P4J_SRC_UOP_INC_AF", "P4J_SRC_ZERO_CONST_VF","P4J_FORMER_ABST_V_AF", "P4J_FORMER_ASSIGN_CONST_AF", "P4J_FORMER_ASSIGN_LHS_AF", "P4J_FORMER_ASSIGN_ZERO_AF", "P4J_FORMER_CALLEE_AF", "P4J_FORMER_CALL_ARGUMENT_AF", "P4J_FORMER_CHANGED_AF", "P4J_FORMER_DEREF_AF", "P4J_FORMER_FUNC_ARGUMENT_VF", "P4J_FORMER_GLOBAL_VARIABLE_VF", "P4J_FORMER_INDEX_AF", "P4J_FORMER_INSERT_CONTROL_RF", "P4J_FORMER_INSERT_GUARD_RF", "P4J_FORMER_INSERT_STMT_RF", "P4J_FORMER_LOCAL_VARIABLE_VF", "P4J_FORMER_MEMBER_ACCESS_AF", "P4J_FORMER_MEMBER_VF", "P4J_FORMER_MODIFIED_SIMILAR_VF", "P4J_FORMER_MODIFIED_VF", "P4J_FORMER_NONZERO_CONST_VF", "P4J_FORMER_OP_ADD_AF", "P4J_FORMER_OP_DIV_AF", "P4J_FORMER_OP_EQ_AF", "P4J_FORMER_OP_GE_AF", "P4J_FORMER_OP_GT_AF", "P4J_FORMER_OP_LE_AF", "P4J_FORMER_OP_LT_AF", "P4J_FORMER_OP_MOD_AF", "P4J_FORMER_OP_MUL_AF", "P4J_FORMER_OP_NE_AF", "P4J_FORMER_OP_SUB_AF", "P4J_FORMER_REMOVE_PARTIAL_IF ","P4J_FORMER_REMOVE_STMT ","P4J_FORMER_REMOVE_WHOLE_BLOCK", "P4J_FORMER_REMOVE_WHOLE_IF", "P4J_FORMER_REPLACE_COND_RF", "P4J_FORMER_REPLACE_STMT_RF", "P4J_FORMER_R_STMT_ASSIGN_AF", "P4J_FORMER_R_STMT_CALL_AF", "P4J_FORMER_R_STMT_COND_AF", "P4J_FORMER_R_STMT_CONTROL_AF", "P4J_FORMER_SIZE_LITERAL_VF", "P4J_FORMER_STMT_ASSIGN_AF", "P4J_FORMER_STMT_CALL_AF", "P4J_FORMER_STMT_COND_AF", "P4J_FORMER_STMT_CONTROL_AF", "P4J_FORMER_STMT_LABEL_AF", "P4J_FORMER_STMT_LOOP_AF", "P4J_FORMER_STRING_LITERAL_VF", "P4J_FORMER_UOP_DEC_AF", "P4J_FORMER_UOP_INC_AF", "P4J_FORMER_ZERO_CONST_VF", "P4J_LATER_ABST_V_AF", "P4J_LATER_ASSIGN_CONST_AF", "P4J_LATER_ASSIGN_LHS_AF", "P4J_LATER_ASSIGN_ZERO_AF", "P4J_LATER_CALLEE_AF", "P4J_LATER_CALL_ARGUMENT_AF", "P4J_LATER_CHANGED_AF", "P4J_LATER_DEREF_AF", "P4J_LATER_FUNC_ARGUMENT_VF", "P4J_LATER_GLOBAL_VARIABLE_VF", "P4J_LATER_INDEX_AF", "P4J_LATER_INSERT_CONTROL_RF", "P4J_LATER_INSERT_GUARD_RF", "P4J_LATER_INSERT_STMT_RF", "P4J_LATER_LOCAL_VARIABLE_VF", "P4J_LATER_MEMBER_ACCESS_AF", "P4J_LATER_MEMBER_VF", "P4J_LATER_MODIFIED_SIMILAR_VF", "P4J_LATER_MODIFIED_VF", "P4J_LATER_NONZERO_CONST_VF", "P4J_LATER_OP_ADD_AF", "P4J_LATER_OP_DIV_AF", "P4J_LATER_OP_EQ_AF", "P4J_LATER_OP_GE_AF", "P4J_LATER_OP_GT_AF", "P4J_LATER_OP_LE_AF", "P4J_LATER_OP_LT_AF", "P4J_LATER_OP_MOD_AF", "P4J_LATER_OP_MUL_AF", "P4J_LATER_OP_NE_AF", "P4J_LATER_OP_SUB_AF", "P4J_LATER_REMOVE_PARTIAL_IF", "P4J_LATER_REMOVE_STMT", "P4J_LATER_REMOVE_WHOLE_BLOCK", "P4J_LATER_REMOVE_WHOLE_IF", "P4J_LATER_REPLACE_COND_RF", "P4J_LATER_REPLACE_STMT_RF", "P4J_LATER_R_STMT_ASSIGN_AF", "P4J_LATER_R_STMT_CALL_AF", "P4J_LATER_R_STMT_COND_AF", "P4J_LATER_R_STMT_CONTROL_AF", "P4J_LATER_SIZE_LITERAL_VF", "P4J_LATER_STMT_ASSIGN_AF", "P4J_LATER_STMT_CALL_AF", "P4J_LATER_STMT_COND_AF", "P4J_LATER_STMT_CONTROL_AF", "wrapsLoop","wrapsTryCatch","wrapsIfElse","wrongMethodRef","constChange","unwrapIfElse","unwrapTryCatch","expArithMod","codeMove","expLogicExpand","condBlockOthersAdd","wrapsElse","wrapsMethod","wrongVarRef","condBlockRem","unwrapMethod","singleLine","missNullCheckP","missNullCheckN","condBlockExcAdd","notClassified","copyPaste","condBlockRetAdd","expLogicReduce","expLogicMod","wrapsIf","S10_METHOD_CALL_WITH_NULL_GUARD","S11_FAULTY_CLASS_EXCEPTION_TYPE","S12_METHOD_CALL_WITH_TRY_CATCH","S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1","S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2","S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3","S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1","S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2","S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3","S14_TYPE_OF_FAULTY_STATEMENT_PARENT","S15_HAS_OBJECTIVE_METHOD_CALL","S16_HAS_Invocations_Prone_Exception","S18_In_Synchronized_Method","S1_LOCAL_VAR_NOT_ASSIGNED","S1_LOCAL_VAR_NOT_USED","S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD","S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD","S3_TYPE_OF_FAULTY_STATEMENT","S4_Field_NOT_ASSIGNED","S4_Field_NOT_USED","S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD","S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD","S6_METHOD_THROWS_EXCEPTION","S7_OBJECT_USED_IN_ASSIGNMENT","S8_PRIMITIVE_USED_IN_ASSIGNMENT","S9_METHOD_CALL_WITH_NORMAL_GUARD",]
def travFolder(filepath):
    jsonfiles = os.listdir(filepath)
    for jf in jsonfiles:
        with open (filepath+jf,'r') as currentfile:
            lines = currentfile.readlines()
            values=""
            for line in lines:
                if '"id":' in line:
                    s=line.replace('\r','').replace('\n','').replace(',','')
                    jfilename=s.split(":")[1]
                    jfilename=jfilename.replace('"','').replace(' ','')
                    values+=jfilename+','
                    patchedclass = jfilename.split('_')[-1]
                    patchid = jfilename.split('_'+patchedclass)[0]
                    values+='1,'

            for fes in features:
                for line in lines:
                    if fes in line:
                        s=line.replace('\r','').replace('\n','').replace(',','')
                        values+=s.split(":")[1]+','
                        break
        
        with open ("RZeroFeatures.csv",'a') as resultfile:
            if len(values.split(',')) > 10:
                resultfile.write(values[:-1]+',\n')

if __name__ == '__main__':
    travFolder('./features/')